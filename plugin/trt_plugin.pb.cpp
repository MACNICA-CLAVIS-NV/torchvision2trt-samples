// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trt_plugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trt_plugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace macnica_trt_plugins {

namespace {

const ::google::protobuf::Descriptor* pooling_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pooling_Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* copy_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  copy_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataTypeMessage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolingMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlgoImpl_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_trt_5fplugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_trt_5fplugin_2eproto() {
  protobuf_AddDesc_trt_5fplugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "trt_plugin.proto");
  GOOGLE_CHECK(file != NULL);
  pooling_Message_descriptor_ = file->message_type(0);
  static const int pooling_Message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, impl_),
  };
  pooling_Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pooling_Message_descriptor_,
      pooling_Message::default_instance_,
      pooling_Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(pooling_Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pooling_Message, _is_default_instance_));
  copy_Message_descriptor_ = file->message_type(1);
  static const int copy_Message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(copy_Message, dims_),
  };
  copy_Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      copy_Message_descriptor_,
      copy_Message::default_instance_,
      copy_Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(copy_Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(copy_Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(copy_Message, _is_default_instance_));
  DataTypeMessage_descriptor_ = file->enum_type(0);
  PoolingMode_descriptor_ = file->enum_type(1);
  AlgoImpl_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_trt_5fplugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pooling_Message_descriptor_, &pooling_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      copy_Message_descriptor_, &copy_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_trt_5fplugin_2eproto() {
  delete pooling_Message::default_instance_;
  delete pooling_Message_reflection_;
  delete copy_Message::default_instance_;
  delete copy_Message_reflection_;
}

void protobuf_AddDesc_trt_5fplugin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_trt_5fplugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020trt_plugin.proto\022\023macnica_trt_plugins\""
    "\234\001\n\017pooling_Message\022\014\n\004dims\030\001 \003(\003\022.\n\004mod"
    "e\030\002 \001(\0162 .macnica_trt_plugins.PoolingMod"
    "e\022\016\n\006window\030\003 \003(\003\022\016\n\006stride\030\004 \003(\003\022+\n\004imp"
    "l\030\005 \001(\0162\035.macnica_trt_plugins.AlgoImpl\"\034"
    "\n\014copy_Message\022\014\n\004dims\030\001 \003(\003*\?\n\017DataType"
    "Message\022\n\n\006kFloat\020\000\022\t\n\005kHalf\020\001\022\t\n\005kInt8\020"
    "\002\022\n\n\006kInt32\020\003*\'\n\013PoolingMode\022\013\n\007Maximum\020"
    "\000\022\013\n\007Average\020\001*\037\n\010AlgoImpl\022\010\n\004CUDA\020\000\022\t\n\005"
    "CuDNN\020\001b\006proto3", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trt_plugin.proto", &protobuf_RegisterTypes);
  pooling_Message::default_instance_ = new pooling_Message();
  copy_Message::default_instance_ = new copy_Message();
  pooling_Message::default_instance_->InitAsDefaultInstance();
  copy_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_trt_5fplugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_trt_5fplugin_2eproto {
  StaticDescriptorInitializer_trt_5fplugin_2eproto() {
    protobuf_AddDesc_trt_5fplugin_2eproto();
  }
} static_descriptor_initializer_trt_5fplugin_2eproto_;
const ::google::protobuf::EnumDescriptor* DataTypeMessage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTypeMessage_descriptor_;
}
bool DataTypeMessage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PoolingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingMode_descriptor_;
}
bool PoolingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlgoImpl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgoImpl_descriptor_;
}
bool AlgoImpl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pooling_Message::kDimsFieldNumber;
const int pooling_Message::kModeFieldNumber;
const int pooling_Message::kWindowFieldNumber;
const int pooling_Message::kStrideFieldNumber;
const int pooling_Message::kImplFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pooling_Message::pooling_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:macnica_trt_plugins.pooling_Message)
}

void pooling_Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pooling_Message::pooling_Message(const pooling_Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:macnica_trt_plugins.pooling_Message)
}

void pooling_Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mode_ = 0;
  impl_ = 0;
}

pooling_Message::~pooling_Message() {
  // @@protoc_insertion_point(destructor:macnica_trt_plugins.pooling_Message)
  SharedDtor();
}

void pooling_Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pooling_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pooling_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pooling_Message_descriptor_;
}

const pooling_Message& pooling_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trt_5fplugin_2eproto();
  return *default_instance_;
}

pooling_Message* pooling_Message::default_instance_ = NULL;

pooling_Message* pooling_Message::New(::google::protobuf::Arena* arena) const {
  pooling_Message* n = new pooling_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pooling_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:macnica_trt_plugins.pooling_Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pooling_Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pooling_Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mode_, impl_);

#undef ZR_HELPER_
#undef ZR_

  dims_.Clear();
  window_.Clear();
  stride_.Clear();
}

bool pooling_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:macnica_trt_plugins.pooling_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .macnica_trt_plugins.PoolingMode mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::macnica_trt_plugins::PoolingMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_window;
        break;
      }

      // repeated int64 window = 3;
      case 3: {
        if (tag == 26) {
         parse_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_window())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_window())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stride;
        break;
      }

      // repeated int64 stride = 4;
      case 4: {
        if (tag == 34) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_stride())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_impl;
        break;
      }

      // optional .macnica_trt_plugins.AlgoImpl impl = 5;
      case 5: {
        if (tag == 40) {
         parse_impl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_impl(static_cast< ::macnica_trt_plugins::AlgoImpl >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:macnica_trt_plugins.pooling_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:macnica_trt_plugins.pooling_Message)
  return false;
#undef DO_
}

void pooling_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:macnica_trt_plugins.pooling_Message)
  // repeated int64 dims = 1;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  // optional .macnica_trt_plugins.PoolingMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // repeated int64 window = 3;
  if (this->window_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_window_cached_byte_size_);
  }
  for (int i = 0; i < this->window_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->window(i), output);
  }

  // repeated int64 stride = 4;
  if (this->stride_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stride_cached_byte_size_);
  }
  for (int i = 0; i < this->stride_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->stride(i), output);
  }

  // optional .macnica_trt_plugins.AlgoImpl impl = 5;
  if (this->impl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->impl(), output);
  }

  // @@protoc_insertion_point(serialize_end:macnica_trt_plugins.pooling_Message)
}

::google::protobuf::uint8* pooling_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:macnica_trt_plugins.pooling_Message)
  // repeated int64 dims = 1;
  if (this->dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dims(i), target);
  }

  // optional .macnica_trt_plugins.PoolingMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // repeated int64 window = 3;
  if (this->window_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _window_cached_byte_size_, target);
  }
  for (int i = 0; i < this->window_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->window(i), target);
  }

  // repeated int64 stride = 4;
  if (this->stride_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stride_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stride_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->stride(i), target);
  }

  // optional .macnica_trt_plugins.AlgoImpl impl = 5;
  if (this->impl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->impl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:macnica_trt_plugins.pooling_Message)
  return target;
}

int pooling_Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:macnica_trt_plugins.pooling_Message)
  int total_size = 0;

  // optional .macnica_trt_plugins.PoolingMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // optional .macnica_trt_plugins.AlgoImpl impl = 5;
  if (this->impl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->impl());
  }

  // repeated int64 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 window = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->window_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->window(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _window_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 stride = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stride_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->stride(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stride_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pooling_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:macnica_trt_plugins.pooling_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pooling_Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pooling_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:macnica_trt_plugins.pooling_Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:macnica_trt_plugins.pooling_Message)
    MergeFrom(*source);
  }
}

void pooling_Message::MergeFrom(const pooling_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:macnica_trt_plugins.pooling_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dims_.MergeFrom(from.dims_);
  window_.MergeFrom(from.window_);
  stride_.MergeFrom(from.stride_);
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.impl() != 0) {
    set_impl(from.impl());
  }
}

void pooling_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:macnica_trt_plugins.pooling_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pooling_Message::CopyFrom(const pooling_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:macnica_trt_plugins.pooling_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pooling_Message::IsInitialized() const {

  return true;
}

void pooling_Message::Swap(pooling_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pooling_Message::InternalSwap(pooling_Message* other) {
  dims_.UnsafeArenaSwap(&other->dims_);
  std::swap(mode_, other->mode_);
  window_.UnsafeArenaSwap(&other->window_);
  stride_.UnsafeArenaSwap(&other->stride_);
  std::swap(impl_, other->impl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pooling_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pooling_Message_descriptor_;
  metadata.reflection = pooling_Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pooling_Message

// repeated int64 dims = 1;
int pooling_Message::dims_size() const {
  return dims_.size();
}
void pooling_Message::clear_dims() {
  dims_.Clear();
}
 ::google::protobuf::int64 pooling_Message::dims(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.dims)
  return dims_.Get(index);
}
 void pooling_Message::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.dims)
}
 void pooling_Message::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
pooling_Message::dims() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.dims)
  return dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
pooling_Message::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.dims)
  return &dims_;
}

// optional .macnica_trt_plugins.PoolingMode mode = 2;
void pooling_Message::clear_mode() {
  mode_ = 0;
}
 ::macnica_trt_plugins::PoolingMode pooling_Message::mode() const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.mode)
  return static_cast< ::macnica_trt_plugins::PoolingMode >(mode_);
}
 void pooling_Message::set_mode(::macnica_trt_plugins::PoolingMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.mode)
}

// repeated int64 window = 3;
int pooling_Message::window_size() const {
  return window_.size();
}
void pooling_Message::clear_window() {
  window_.Clear();
}
 ::google::protobuf::int64 pooling_Message::window(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.window)
  return window_.Get(index);
}
 void pooling_Message::set_window(int index, ::google::protobuf::int64 value) {
  window_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.window)
}
 void pooling_Message::add_window(::google::protobuf::int64 value) {
  window_.Add(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.window)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
pooling_Message::window() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.window)
  return window_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
pooling_Message::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.window)
  return &window_;
}

// repeated int64 stride = 4;
int pooling_Message::stride_size() const {
  return stride_.size();
}
void pooling_Message::clear_stride() {
  stride_.Clear();
}
 ::google::protobuf::int64 pooling_Message::stride(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.stride)
  return stride_.Get(index);
}
 void pooling_Message::set_stride(int index, ::google::protobuf::int64 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.stride)
}
 void pooling_Message::add_stride(::google::protobuf::int64 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.stride)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
pooling_Message::stride() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.stride)
  return stride_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
pooling_Message::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.stride)
  return &stride_;
}

// optional .macnica_trt_plugins.AlgoImpl impl = 5;
void pooling_Message::clear_impl() {
  impl_ = 0;
}
 ::macnica_trt_plugins::AlgoImpl pooling_Message::impl() const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.impl)
  return static_cast< ::macnica_trt_plugins::AlgoImpl >(impl_);
}
 void pooling_Message::set_impl(::macnica_trt_plugins::AlgoImpl value) {
  
  impl_ = value;
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.impl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int copy_Message::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

copy_Message::copy_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:macnica_trt_plugins.copy_Message)
}

void copy_Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

copy_Message::copy_Message(const copy_Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:macnica_trt_plugins.copy_Message)
}

void copy_Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

copy_Message::~copy_Message() {
  // @@protoc_insertion_point(destructor:macnica_trt_plugins.copy_Message)
  SharedDtor();
}

void copy_Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void copy_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* copy_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return copy_Message_descriptor_;
}

const copy_Message& copy_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_trt_5fplugin_2eproto();
  return *default_instance_;
}

copy_Message* copy_Message::default_instance_ = NULL;

copy_Message* copy_Message::New(::google::protobuf::Arena* arena) const {
  copy_Message* n = new copy_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void copy_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:macnica_trt_plugins.copy_Message)
  dims_.Clear();
}

bool copy_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:macnica_trt_plugins.copy_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:macnica_trt_plugins.copy_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:macnica_trt_plugins.copy_Message)
  return false;
#undef DO_
}

void copy_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:macnica_trt_plugins.copy_Message)
  // repeated int64 dims = 1;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  // @@protoc_insertion_point(serialize_end:macnica_trt_plugins.copy_Message)
}

::google::protobuf::uint8* copy_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:macnica_trt_plugins.copy_Message)
  // repeated int64 dims = 1;
  if (this->dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dims(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:macnica_trt_plugins.copy_Message)
  return target;
}

int copy_Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:macnica_trt_plugins.copy_Message)
  int total_size = 0;

  // repeated int64 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void copy_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:macnica_trt_plugins.copy_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const copy_Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const copy_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:macnica_trt_plugins.copy_Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:macnica_trt_plugins.copy_Message)
    MergeFrom(*source);
  }
}

void copy_Message::MergeFrom(const copy_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:macnica_trt_plugins.copy_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dims_.MergeFrom(from.dims_);
}

void copy_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:macnica_trt_plugins.copy_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void copy_Message::CopyFrom(const copy_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:macnica_trt_plugins.copy_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool copy_Message::IsInitialized() const {

  return true;
}

void copy_Message::Swap(copy_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void copy_Message::InternalSwap(copy_Message* other) {
  dims_.UnsafeArenaSwap(&other->dims_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata copy_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = copy_Message_descriptor_;
  metadata.reflection = copy_Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// copy_Message

// repeated int64 dims = 1;
int copy_Message::dims_size() const {
  return dims_.size();
}
void copy_Message::clear_dims() {
  dims_.Clear();
}
 ::google::protobuf::int64 copy_Message::dims(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.copy_Message.dims)
  return dims_.Get(index);
}
 void copy_Message::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.copy_Message.dims)
}
 void copy_Message::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.copy_Message.dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
copy_Message::dims() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.copy_Message.dims)
  return dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
copy_Message::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.copy_Message.dims)
  return &dims_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace macnica_trt_plugins

// @@protoc_insertion_point(global_scope)
