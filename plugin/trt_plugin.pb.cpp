// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trt_plugin.proto

#include "trt_plugin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace macnica_trt_plugins {
PROTOBUF_CONSTEXPR pooling_Message::pooling_Message(
    ::_pbi::ConstantInitialized)
  : dims_()
  , _dims_cached_byte_size_(0)
  , window_()
  , _window_cached_byte_size_(0)
  , stride_()
  , _stride_cached_byte_size_(0)
  , mode_(0)

  , impl_(0)
{}
struct pooling_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pooling_MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pooling_MessageDefaultTypeInternal() {}
  union {
    pooling_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pooling_MessageDefaultTypeInternal _pooling_Message_default_instance_;
PROTOBUF_CONSTEXPR copy_Message::copy_Message(
    ::_pbi::ConstantInitialized)
  : dims_()
  , _dims_cached_byte_size_(0){}
struct copy_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR copy_MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~copy_MessageDefaultTypeInternal() {}
  union {
    copy_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 copy_MessageDefaultTypeInternal _copy_Message_default_instance_;
}  // namespace macnica_trt_plugins
static ::_pb::Metadata file_level_metadata_trt_5fplugin_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_trt_5fplugin_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trt_5fplugin_2eproto = nullptr;

const uint32_t TableStruct_trt_5fplugin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, dims_),
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, mode_),
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, window_),
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, stride_),
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::pooling_Message, impl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::copy_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::macnica_trt_plugins::copy_Message, dims_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::macnica_trt_plugins::pooling_Message)},
  { 11, -1, -1, sizeof(::macnica_trt_plugins::copy_Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::macnica_trt_plugins::_pooling_Message_default_instance_._instance,
  &::macnica_trt_plugins::_copy_Message_default_instance_._instance,
};

const char descriptor_table_protodef_trt_5fplugin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020trt_plugin.proto\022\023macnica_trt_plugins\""
  "\234\001\n\017pooling_Message\022\014\n\004dims\030\001 \003(\003\022.\n\004mod"
  "e\030\002 \001(\0162 .macnica_trt_plugins.PoolingMod"
  "e\022\016\n\006window\030\003 \003(\003\022\016\n\006stride\030\004 \003(\003\022+\n\004imp"
  "l\030\005 \001(\0162\035.macnica_trt_plugins.AlgoImpl\"\034"
  "\n\014copy_Message\022\014\n\004dims\030\001 \003(\003*\?\n\017DataType"
  "Message\022\n\n\006kFloat\020\000\022\t\n\005kHalf\020\001\022\t\n\005kInt8\020"
  "\002\022\n\n\006kInt32\020\003*\'\n\013PoolingMode\022\013\n\007Maximum\020"
  "\000\022\013\n\007Average\020\001*\037\n\010AlgoImpl\022\010\n\004CUDA\020\000\022\t\n\005"
  "CuDNN\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_trt_5fplugin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trt_5fplugin_2eproto = {
    false, false, 375, descriptor_table_protodef_trt_5fplugin_2eproto,
    "trt_plugin.proto",
    &descriptor_table_trt_5fplugin_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_trt_5fplugin_2eproto::offsets,
    file_level_metadata_trt_5fplugin_2eproto, file_level_enum_descriptors_trt_5fplugin_2eproto,
    file_level_service_descriptors_trt_5fplugin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trt_5fplugin_2eproto_getter() {
  return &descriptor_table_trt_5fplugin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trt_5fplugin_2eproto(&descriptor_table_trt_5fplugin_2eproto);
namespace macnica_trt_plugins {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataTypeMessage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trt_5fplugin_2eproto);
  return file_level_enum_descriptors_trt_5fplugin_2eproto[0];
}
bool DataTypeMessage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trt_5fplugin_2eproto);
  return file_level_enum_descriptors_trt_5fplugin_2eproto[1];
}
bool PoolingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgoImpl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trt_5fplugin_2eproto);
  return file_level_enum_descriptors_trt_5fplugin_2eproto[2];
}
bool AlgoImpl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class pooling_Message::_Internal {
 public:
};

pooling_Message::pooling_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dims_(arena),
  window_(arena),
  stride_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:macnica_trt_plugins.pooling_Message)
}
pooling_Message::pooling_Message(const pooling_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_),
      window_(from.window_),
      stride_(from.stride_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&impl_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(impl_));
  // @@protoc_insertion_point(copy_constructor:macnica_trt_plugins.pooling_Message)
}

inline void pooling_Message::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&impl_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(impl_));
}

pooling_Message::~pooling_Message() {
  // @@protoc_insertion_point(destructor:macnica_trt_plugins.pooling_Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pooling_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void pooling_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pooling_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:macnica_trt_plugins.pooling_Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  window_.Clear();
  stride_.Clear();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impl_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(impl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pooling_Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .macnica_trt_plugins.PoolingMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::macnica_trt_plugins::PoolingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 window = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_window(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_window(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 stride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .macnica_trt_plugins.AlgoImpl impl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_impl(static_cast<::macnica_trt_plugins::AlgoImpl>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pooling_Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:macnica_trt_plugins.pooling_Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dims(), byte_size, target);
    }
  }

  // .macnica_trt_plugins.PoolingMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // repeated int64 window = 3;
  {
    int byte_size = _window_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_window(), byte_size, target);
    }
  }

  // repeated int64 stride = 4;
  {
    int byte_size = _stride_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_stride(), byte_size, target);
    }
  }

  // .macnica_trt_plugins.AlgoImpl impl = 5;
  if (this->_internal_impl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_impl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:macnica_trt_plugins.pooling_Message)
  return target;
}

size_t pooling_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:macnica_trt_plugins.pooling_Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 window = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->window_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _window_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 stride = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->stride_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _stride_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .macnica_trt_plugins.PoolingMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .macnica_trt_plugins.AlgoImpl impl = 5;
  if (this->_internal_impl() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_impl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pooling_Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pooling_Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pooling_Message::GetClassData() const { return &_class_data_; }

void pooling_Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pooling_Message *>(to)->MergeFrom(
      static_cast<const pooling_Message &>(from));
}


void pooling_Message::MergeFrom(const pooling_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:macnica_trt_plugins.pooling_Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  window_.MergeFrom(from.window_);
  stride_.MergeFrom(from.stride_);
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_impl() != 0) {
    _internal_set_impl(from._internal_impl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pooling_Message::CopyFrom(const pooling_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:macnica_trt_plugins.pooling_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pooling_Message::IsInitialized() const {
  return true;
}

void pooling_Message::InternalSwap(pooling_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  window_.InternalSwap(&other->window_);
  stride_.InternalSwap(&other->stride_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pooling_Message, impl_)
      + sizeof(pooling_Message::impl_)
      - PROTOBUF_FIELD_OFFSET(pooling_Message, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pooling_Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trt_5fplugin_2eproto_getter, &descriptor_table_trt_5fplugin_2eproto_once,
      file_level_metadata_trt_5fplugin_2eproto[0]);
}

// ===================================================================

class copy_Message::_Internal {
 public:
};

copy_Message::copy_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dims_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:macnica_trt_plugins.copy_Message)
}
copy_Message::copy_Message(const copy_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:macnica_trt_plugins.copy_Message)
}

inline void copy_Message::SharedCtor() {
}

copy_Message::~copy_Message() {
  // @@protoc_insertion_point(destructor:macnica_trt_plugins.copy_Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void copy_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void copy_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void copy_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:macnica_trt_plugins.copy_Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* copy_Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* copy_Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:macnica_trt_plugins.copy_Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    int byte_size = _dims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:macnica_trt_plugins.copy_Message)
  return target;
}

size_t copy_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:macnica_trt_plugins.copy_Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData copy_Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    copy_Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*copy_Message::GetClassData() const { return &_class_data_; }

void copy_Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<copy_Message *>(to)->MergeFrom(
      static_cast<const copy_Message &>(from));
}


void copy_Message::MergeFrom(const copy_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:macnica_trt_plugins.copy_Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void copy_Message::CopyFrom(const copy_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:macnica_trt_plugins.copy_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool copy_Message::IsInitialized() const {
  return true;
}

void copy_Message::InternalSwap(copy_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata copy_Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trt_5fplugin_2eproto_getter, &descriptor_table_trt_5fplugin_2eproto_once,
      file_level_metadata_trt_5fplugin_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace macnica_trt_plugins
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::macnica_trt_plugins::pooling_Message*
Arena::CreateMaybeMessage< ::macnica_trt_plugins::pooling_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::macnica_trt_plugins::pooling_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::macnica_trt_plugins::copy_Message*
Arena::CreateMaybeMessage< ::macnica_trt_plugins::copy_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::macnica_trt_plugins::copy_Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
