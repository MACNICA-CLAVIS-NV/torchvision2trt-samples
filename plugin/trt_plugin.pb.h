// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trt_plugin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trt_5fplugin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trt_5fplugin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trt_5fplugin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trt_5fplugin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trt_5fplugin_2eproto;
namespace macnica_trt_plugins {
class copy_Message;
struct copy_MessageDefaultTypeInternal;
extern copy_MessageDefaultTypeInternal _copy_Message_default_instance_;
class pooling_Message;
struct pooling_MessageDefaultTypeInternal;
extern pooling_MessageDefaultTypeInternal _pooling_Message_default_instance_;
}  // namespace macnica_trt_plugins
PROTOBUF_NAMESPACE_OPEN
template<> ::macnica_trt_plugins::copy_Message* Arena::CreateMaybeMessage<::macnica_trt_plugins::copy_Message>(Arena*);
template<> ::macnica_trt_plugins::pooling_Message* Arena::CreateMaybeMessage<::macnica_trt_plugins::pooling_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace macnica_trt_plugins {

enum DataTypeMessage : int {
  kFloat = 0,
  kHalf = 1,
  kInt8 = 2,
  kInt32 = 3,
  DataTypeMessage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataTypeMessage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataTypeMessage_IsValid(int value);
constexpr DataTypeMessage DataTypeMessage_MIN = kFloat;
constexpr DataTypeMessage DataTypeMessage_MAX = kInt32;
constexpr int DataTypeMessage_ARRAYSIZE = DataTypeMessage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataTypeMessage_descriptor();
template<typename T>
inline const std::string& DataTypeMessage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataTypeMessage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataTypeMessage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataTypeMessage_descriptor(), enum_t_value);
}
inline bool DataTypeMessage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataTypeMessage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataTypeMessage>(
    DataTypeMessage_descriptor(), name, value);
}
enum PoolingMode : int {
  Maximum = 0,
  Average = 1,
  PoolingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PoolingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PoolingMode_IsValid(int value);
constexpr PoolingMode PoolingMode_MIN = Maximum;
constexpr PoolingMode PoolingMode_MAX = Average;
constexpr int PoolingMode_ARRAYSIZE = PoolingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingMode_descriptor();
template<typename T>
inline const std::string& PoolingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PoolingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PoolingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PoolingMode_descriptor(), enum_t_value);
}
inline bool PoolingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PoolingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PoolingMode>(
    PoolingMode_descriptor(), name, value);
}
enum AlgoImpl : int {
  CUDA = 0,
  CuDNN = 1,
  AlgoImpl_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlgoImpl_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlgoImpl_IsValid(int value);
constexpr AlgoImpl AlgoImpl_MIN = CUDA;
constexpr AlgoImpl AlgoImpl_MAX = CuDNN;
constexpr int AlgoImpl_ARRAYSIZE = AlgoImpl_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgoImpl_descriptor();
template<typename T>
inline const std::string& AlgoImpl_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlgoImpl>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlgoImpl_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlgoImpl_descriptor(), enum_t_value);
}
inline bool AlgoImpl_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlgoImpl* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlgoImpl>(
    AlgoImpl_descriptor(), name, value);
}
// ===================================================================

class pooling_Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:macnica_trt_plugins.pooling_Message) */ {
 public:
  inline pooling_Message() : pooling_Message(nullptr) {}
  ~pooling_Message() override;
  explicit PROTOBUF_CONSTEXPR pooling_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pooling_Message(const pooling_Message& from);
  pooling_Message(pooling_Message&& from) noexcept
    : pooling_Message() {
    *this = ::std::move(from);
  }

  inline pooling_Message& operator=(const pooling_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline pooling_Message& operator=(pooling_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pooling_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const pooling_Message* internal_default_instance() {
    return reinterpret_cast<const pooling_Message*>(
               &_pooling_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pooling_Message& a, pooling_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(pooling_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pooling_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pooling_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pooling_Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pooling_Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pooling_Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pooling_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "macnica_trt_plugins.pooling_Message";
  }
  protected:
  explicit pooling_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kWindowFieldNumber = 3,
    kStrideFieldNumber = 4,
    kModeFieldNumber = 2,
    kImplFieldNumber = 5,
  };
  // repeated int64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  int64_t _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dims() const;
  void _internal_add_dims(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dims();
  public:
  int64_t dims(int index) const;
  void set_dims(int index, int64_t value);
  void add_dims(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dims();

  // repeated int64 window = 3;
  int window_size() const;
  private:
  int _internal_window_size() const;
  public:
  void clear_window();
  private:
  int64_t _internal_window(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_window() const;
  void _internal_add_window(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_window();
  public:
  int64_t window(int index) const;
  void set_window(int index, int64_t value);
  void add_window(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      window() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_window();

  // repeated int64 stride = 4;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  int64_t _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_stride() const;
  void _internal_add_stride(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_stride();
  public:
  int64_t stride(int index) const;
  void set_stride(int index, int64_t value);
  void add_stride(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_stride();

  // .macnica_trt_plugins.PoolingMode mode = 2;
  void clear_mode();
  ::macnica_trt_plugins::PoolingMode mode() const;
  void set_mode(::macnica_trt_plugins::PoolingMode value);
  private:
  ::macnica_trt_plugins::PoolingMode _internal_mode() const;
  void _internal_set_mode(::macnica_trt_plugins::PoolingMode value);
  public:

  // .macnica_trt_plugins.AlgoImpl impl = 5;
  void clear_impl();
  ::macnica_trt_plugins::AlgoImpl impl() const;
  void set_impl(::macnica_trt_plugins::AlgoImpl value);
  private:
  ::macnica_trt_plugins::AlgoImpl _internal_impl() const;
  void _internal_set_impl(::macnica_trt_plugins::AlgoImpl value);
  public:

  // @@protoc_insertion_point(class_scope:macnica_trt_plugins.pooling_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > window_;
  mutable std::atomic<int> _window_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  int mode_;
  int impl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trt_5fplugin_2eproto;
};
// -------------------------------------------------------------------

class copy_Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:macnica_trt_plugins.copy_Message) */ {
 public:
  inline copy_Message() : copy_Message(nullptr) {}
  ~copy_Message() override;
  explicit PROTOBUF_CONSTEXPR copy_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  copy_Message(const copy_Message& from);
  copy_Message(copy_Message&& from) noexcept
    : copy_Message() {
    *this = ::std::move(from);
  }

  inline copy_Message& operator=(const copy_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline copy_Message& operator=(copy_Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const copy_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const copy_Message* internal_default_instance() {
    return reinterpret_cast<const copy_Message*>(
               &_copy_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(copy_Message& a, copy_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(copy_Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(copy_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  copy_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<copy_Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const copy_Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const copy_Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copy_Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "macnica_trt_plugins.copy_Message";
  }
  protected:
  explicit copy_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
  };
  // repeated int64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  int64_t _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dims() const;
  void _internal_add_dims(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dims();
  public:
  int64_t dims(int index) const;
  void set_dims(int index, int64_t value);
  void add_dims(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dims();

  // @@protoc_insertion_point(class_scope:macnica_trt_plugins.copy_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dims_;
  mutable std::atomic<int> _dims_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trt_5fplugin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pooling_Message

// repeated int64 dims = 1;
inline int pooling_Message::_internal_dims_size() const {
  return dims_.size();
}
inline int pooling_Message::dims_size() const {
  return _internal_dims_size();
}
inline void pooling_Message::clear_dims() {
  dims_.Clear();
}
inline int64_t pooling_Message::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline int64_t pooling_Message::dims(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.dims)
  return _internal_dims(index);
}
inline void pooling_Message::set_dims(int index, int64_t value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.dims)
}
inline void pooling_Message::_internal_add_dims(int64_t value) {
  dims_.Add(value);
}
inline void pooling_Message::add_dims(int64_t value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::dims() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.dims)
  return _internal_mutable_dims();
}

// .macnica_trt_plugins.PoolingMode mode = 2;
inline void pooling_Message::clear_mode() {
  mode_ = 0;
}
inline ::macnica_trt_plugins::PoolingMode pooling_Message::_internal_mode() const {
  return static_cast< ::macnica_trt_plugins::PoolingMode >(mode_);
}
inline ::macnica_trt_plugins::PoolingMode pooling_Message::mode() const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.mode)
  return _internal_mode();
}
inline void pooling_Message::_internal_set_mode(::macnica_trt_plugins::PoolingMode value) {
  
  mode_ = value;
}
inline void pooling_Message::set_mode(::macnica_trt_plugins::PoolingMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.mode)
}

// repeated int64 window = 3;
inline int pooling_Message::_internal_window_size() const {
  return window_.size();
}
inline int pooling_Message::window_size() const {
  return _internal_window_size();
}
inline void pooling_Message::clear_window() {
  window_.Clear();
}
inline int64_t pooling_Message::_internal_window(int index) const {
  return window_.Get(index);
}
inline int64_t pooling_Message::window(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.window)
  return _internal_window(index);
}
inline void pooling_Message::set_window(int index, int64_t value) {
  window_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.window)
}
inline void pooling_Message::_internal_add_window(int64_t value) {
  window_.Add(value);
}
inline void pooling_Message::add_window(int64_t value) {
  _internal_add_window(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.window)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::_internal_window() const {
  return window_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::window() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.window)
  return _internal_window();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::_internal_mutable_window() {
  return &window_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.window)
  return _internal_mutable_window();
}

// repeated int64 stride = 4;
inline int pooling_Message::_internal_stride_size() const {
  return stride_.size();
}
inline int pooling_Message::stride_size() const {
  return _internal_stride_size();
}
inline void pooling_Message::clear_stride() {
  stride_.Clear();
}
inline int64_t pooling_Message::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline int64_t pooling_Message::stride(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.stride)
  return _internal_stride(index);
}
inline void pooling_Message::set_stride(int index, int64_t value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.stride)
}
inline void pooling_Message::_internal_add_stride(int64_t value) {
  stride_.Add(value);
}
inline void pooling_Message::add_stride(int64_t value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.pooling_Message.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
pooling_Message::stride() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.pooling_Message.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
pooling_Message::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.pooling_Message.stride)
  return _internal_mutable_stride();
}

// .macnica_trt_plugins.AlgoImpl impl = 5;
inline void pooling_Message::clear_impl() {
  impl_ = 0;
}
inline ::macnica_trt_plugins::AlgoImpl pooling_Message::_internal_impl() const {
  return static_cast< ::macnica_trt_plugins::AlgoImpl >(impl_);
}
inline ::macnica_trt_plugins::AlgoImpl pooling_Message::impl() const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.pooling_Message.impl)
  return _internal_impl();
}
inline void pooling_Message::_internal_set_impl(::macnica_trt_plugins::AlgoImpl value) {
  
  impl_ = value;
}
inline void pooling_Message::set_impl(::macnica_trt_plugins::AlgoImpl value) {
  _internal_set_impl(value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.pooling_Message.impl)
}

// -------------------------------------------------------------------

// copy_Message

// repeated int64 dims = 1;
inline int copy_Message::_internal_dims_size() const {
  return dims_.size();
}
inline int copy_Message::dims_size() const {
  return _internal_dims_size();
}
inline void copy_Message::clear_dims() {
  dims_.Clear();
}
inline int64_t copy_Message::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline int64_t copy_Message::dims(int index) const {
  // @@protoc_insertion_point(field_get:macnica_trt_plugins.copy_Message.dims)
  return _internal_dims(index);
}
inline void copy_Message::set_dims(int index, int64_t value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:macnica_trt_plugins.copy_Message.dims)
}
inline void copy_Message::_internal_add_dims(int64_t value) {
  dims_.Add(value);
}
inline void copy_Message::add_dims(int64_t value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:macnica_trt_plugins.copy_Message.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
copy_Message::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
copy_Message::dims() const {
  // @@protoc_insertion_point(field_list:macnica_trt_plugins.copy_Message.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
copy_Message::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
copy_Message::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:macnica_trt_plugins.copy_Message.dims)
  return _internal_mutable_dims();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace macnica_trt_plugins

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::macnica_trt_plugins::DataTypeMessage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::macnica_trt_plugins::DataTypeMessage>() {
  return ::macnica_trt_plugins::DataTypeMessage_descriptor();
}
template <> struct is_proto_enum< ::macnica_trt_plugins::PoolingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::macnica_trt_plugins::PoolingMode>() {
  return ::macnica_trt_plugins::PoolingMode_descriptor();
}
template <> struct is_proto_enum< ::macnica_trt_plugins::AlgoImpl> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::macnica_trt_plugins::AlgoImpl>() {
  return ::macnica_trt_plugins::AlgoImpl_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trt_5fplugin_2eproto
